{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","fileReader","useState","searchQuery","setSearchQuery","fileContent","setFileContent","results","setResults","handleFileRead","content","result","alert","console","log","toString","className","onSubmit","e","preventDefault","trim","length","jsonString","xmlToJSONUtility","xml2json","compact","spaces","parsedJSON","JSON","parse","changeSetName","Package","fullName","_text","types","items","map","type","members","value","push","key","name","mem","tokens","split","tkn","token","item","find","itm","it","isFound","undefined","place","error","style","margin","cols","rows","onChange","target","files","FileReader","onloadend","readAsText","color","border","borderColor","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gTAsBe,SAASA,IACtB,IAMIC,EANJ,EAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAsCF,mBAAiB,IAAvD,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAA4BJ,mBAE1B,MAFF,mBAAKK,EAAL,KAAcC,EAAd,KAoFMC,EAAiB,WACrB,IAAMC,EAAUT,EAAWU,OAC3B,IAAKD,EAKH,OAJAE,MAAM,yDACNC,QAAQC,IAAI,qBAAsB,CAChCJ,YAIJJ,EAAeI,EAAQK,aAUzB,OACE,sBAAKC,UAAU,aAAf,UACE,8DACA,uBAAMC,SApGO,SAACC,GAChBA,EAAEC,iBAEFX,EAAW,IAEX,IACE,IACGL,IACAE,GAC6B,IAA9BF,EAAYiB,OAAOC,QACW,IAA9BhB,EAAYe,OAAOC,OASnB,OAPAR,QAAQC,IAAI,uCAAwC,CAClDX,cACAE,qBAEFO,MACE,sEAIJ,IAAMU,EAAaC,IAAiBC,SAASnB,EAAa,CACxDoB,SAAS,EACTC,OAAQ,IAGJC,EAAaC,KAAKC,MAAMP,GAC9BT,QAAQC,IAAI,sBAAuB,CAAEX,cAAawB,eAElD,IACqBG,EACjBH,EAAWI,QADbC,SAAYC,MAGRC,EAAmBP,EAAWI,QAAQG,MAExCC,EAAoB,GAExBA,EAAQD,EAAME,KAAI,SAACC,GACjB,GAAwBA,EAAKC,QAnDVL,MAmDoB,CACrC,IAAIM,EAAQ,GAEZ,OADAA,EAAMC,KAAKH,EAAKC,QAAQL,OACjB,CACLQ,IAAKJ,EAAKK,KAAKT,MACfM,SAGF,MAAO,CACLE,IAAKJ,EAAKK,KAAKT,MACfM,MAAOF,EAAKC,QAAQF,KAAI,SAACO,GAAD,OAAmBA,EAAIV,aAKrD,IAAIW,EAASzC,EAAY0C,MAAM,KAIzBtC,GAFNqC,EAASA,EAAOR,KAAI,SAACU,GAAD,OAASA,EAAI1B,WAEVgB,KAAI,SAACW,GAC1B,IAAMC,EAAOb,EAAMc,MAAK,SAACC,GACvB,OAAOA,EAAIX,MAAMU,MAAK,SAACE,GAAD,OAAQA,IAAOJ,QAGvC,MAAO,CACLA,QACAK,aAAkBC,IAATL,EACTM,WAAgBD,IAATL,EAAqB,GAAKA,EAAKP,QAI1CjC,EAAWD,GACXH,EAAe,IAEfS,QAAQC,IAAI,qBAAsB,CAAEqB,QAAOL,gBAAevB,YAC1D,MAAOgD,GACP1C,QAAQC,IAAIyC,KA0BcC,MAAO,CAAEC,OAAQ,QAA3C,UACE,qBAAKD,MAAO,CAAEC,OAAQ,YAAtB,8CAGA,qBAAKD,MAAO,CAAEC,OAAQ,YAAtB,SACE,0BACEC,KAAM,GACNC,KAAM,EACNpB,MAAOpC,EACPyD,SAAU,SAAC1C,GAAD,OAAOd,EAAec,EAAE2C,OAAOtB,YAG7C,qBAAKiB,MAAO,CAAEC,OAAQ,YAAtB,gCACA,qBAAKD,MAAO,CAAEC,OAAQ,YAAtB,SACE,uBACEpB,KAAK,OACLuB,SAAU,SAAC1C,GA1BI,IAAC4C,KA0BkB5C,EAAE2C,OAAOC,UAxBnD7D,EAAa,IAAI8D,YACNC,UAAYvD,EACvBR,EAAWgE,WAAWH,EAAM,UAyBxB,qBAAKN,MAAO,CAAEC,OAAQ,YAAtB,SACE,wBAAQpB,KAAK,SAAb,wBAIH9B,GACCA,EAAQc,OAAS,GACjBd,EAAQ6B,KAAI,SAACzB,GACX,OACE,sBACEK,UAAU,YAEVwC,MAAO,CACLC,OAAQ,WACRS,MAAOvD,EAAOyC,QAAU,QAAU,MAClCe,OAAQ,YACRC,YAAazD,EAAOyC,QAAU,QAAU,MACxCiB,gBAAiB1D,EAAOyC,QAAU,aAAe,QARrD,UAWGzC,EAAOyC,SAAP,UACIzC,EAAOoC,MADX,0BACkCpC,EAAO2C,QACxC3C,EAAOyC,SAAR,UAAsBzC,EAAOoC,MAA7B,qBAXIpC,EAAOoC,aC/J1B,IAYeuB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6b179670.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport xmlToJSONUtility from \"xml-js\";\nimport \"./App.css\";\n\ntype ItemType = {\n  key: string;\n  value: string[];\n};\n\ninterface TextType {\n  _text: string;\n}\n\ntype MemberType = TextType[] | TextType;\n\ntype XMLType = { members: MemberType; name: TextType };\n\nconst determineMemberType = (member: MemberType): member is TextType => {\n  if ((member as TextType)._text) return true;\n  return false;\n};\n\nexport default function App() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [fileContent, setFileContent] = useState<string>(\"\");\n  let [results, setResults] = useState<\n    { token: string; isFound: boolean; place: string }[] | null\n  >(null);\n\n  let fileReader: FileReader;\n\n  const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    setResults([]);\n\n    try {\n      if (\n        !searchQuery ||\n        !fileContent ||\n        searchQuery.trim().length === 0 ||\n        fileContent.trim().length === 0\n      ) {\n        console.log(\"Search Query or File Content is null\", {\n          searchQuery,\n          fileContent,\n        });\n        alert(\n          \"Search Query or File Content is null : Check Console For More Info\"\n        );\n        return;\n      }\n      const jsonString = xmlToJSONUtility.xml2json(fileContent, {\n        compact: true,\n        spaces: 4,\n      });\n\n      const parsedJSON = JSON.parse(jsonString);\n      console.log(\"Before Processing: \", { searchQuery, parsedJSON });\n\n      const {\n        fullName: { _text: changeSetName },\n      } = parsedJSON.Package;\n\n      const types: XMLType[] = parsedJSON.Package.types;\n\n      let items: ItemType[] = [];\n\n      items = types.map((type: XMLType) => {\n        if (determineMemberType(type.members)) {\n          let value = [];\n          value.push(type.members._text);\n          return {\n            key: type.name._text,\n            value,\n          };\n        } else {\n          return {\n            key: type.name._text,\n            value: type.members.map((mem: TextType) => mem._text),\n          };\n        }\n      });\n\n      let tokens = searchQuery.split(\",\");\n\n      tokens = tokens.map((tkn) => tkn.trim());\n\n      const results = tokens.map((token) => {\n        const item = items.find((itm: ItemType) => {\n          return itm.value.find((it) => it === token);\n        });\n\n        return {\n          token,\n          isFound: item !== undefined,\n          place: item === undefined ? \"\" : item.key,\n        };\n      });\n\n      setResults(results);\n      setSearchQuery(\"\");\n\n      console.log(\"After Processing: \", { items, changeSetName, results });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleFileRead = () => {\n    const content = fileReader.result;\n    if (!content) {\n      alert(\"File Upload failed : Check Console For More Info\");\n      console.log(\"File Upload failed\", {\n        content,\n      });\n      return;\n    }\n    setFileContent(content.toString());\n  };\n\n  const handleFileChosen = (files: FileList | null) => {\n    if (!files) return;\n    fileReader = new FileReader();\n    fileReader.onloadend = handleFileRead;\n    fileReader.readAsText(files[0]);\n  };\n\n  return (\n    <div className=\"App-header\">\n      <h1>Salesforce Changeset Checker</h1>\n      <form onSubmit={onSubmit} style={{ margin: \"2rem\" }}>\n        <div style={{ margin: \"0.5rem 0\" }}>\n          Enter comma-separated file names\n        </div>\n        <div style={{ margin: \"0.5rem 0\" }}>\n          <textarea\n            cols={35}\n            rows={6}\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n          />\n        </div>\n        <div style={{ margin: \"0.5rem 0\" }}>Upload package.xml</div>\n        <div style={{ margin: \"0.5rem 0\" }}>\n          <input\n            type=\"file\"\n            onChange={(e) => handleFileChosen(e.target.files)}\n          />\n        </div>\n        <div style={{ margin: \"0.5rem 0\" }}>\n          <button type=\"submit\">Check</button>\n        </div>\n      </form>\n\n      {results &&\n        results.length > 0 &&\n        results.map((result) => {\n          return (\n            <div\n              className=\"App-alert\"\n              key={result.token}\n              style={{\n                margin: \"0.5rem 0\",\n                color: result.isFound ? \"green\" : \"red\",\n                border: \"solid 3px\",\n                borderColor: result.isFound ? \"green\" : \"red\",\n                backgroundColor: result.isFound ? \"lightgreen\" : \"pink\",\n              }}\n            >\n              {result.isFound &&\n                `${result.token} is present in ${result.place}`}\n              {!result.isFound && `${result.token} is not present`}\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}